version: 2.1

executors:
  java-executor:
    docker:
      - image: cimg/openjdk:17.0
  zap-executor:
    docker:
      - image: ghcr.io/zaproxy/zaproxy:stable

jobs:
  build:
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          name: Run Gradle Tests
          command: ./gradlew check
      - store_test_results:
          path: build/test-results
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.gradle/caches
      - store_artifacts:
          path: build/reports
          destination: test_reports

  zap-baseline-scan:
    executor: zap-executor
    steps:
      - checkout
      - run:
          name: Start OWASP ZAP Baseline Scan
          command: |
            zap-baseline.py -t http://localhost:8080 -r zap_report.html || true
      - store_artifacts:
          path: zap_report.html
          destination: zap_reports

  delvelin-scan:
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Run Delvelin Vulnerability Analysis
          command: |
            # run delvelin command
            ./gradlew delvelinScan
      - run:
          name: Move Delvelin Report to Artifacts
          command: |
            # move html report to /tmp
            mv vulnerability-report.html /tmp/vulnerability-report.html
      - store_artifacts:
          path: /tmp/vulnerability-report.html
          destination: delvelin_reports

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - zap-baseline-scan:
          requires:
            - build
      - delvelin-scan:
          requires:
            - build